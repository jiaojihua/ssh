<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx = "http://www.springframework.org/schema/tx"
       xmlns:aop = "http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd"
    default-autowire="byName">
    <!-- 扫描包下的注解 -->
    <context:component-scan
		base-package="priv.demo.ssh.dao,priv.demo.ssh.service,priv.demo.ssh.action" />
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder location="/WEB-INF/jdbc.properties"/>

    <!-- 2.数据库连接池 -->
    <bean id="dataSource" destroy-method="close" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- c3p0连接池的私有属性 -->
        <!-- 连接池的最大连接数 -->
        <property name="maxPoolSize" value="30"/>
        <!-- 连接池的最小连接数 -->
        <property name="minPoolSize" value="10"/>
        <!-- 初始化连接数 -->
        <property name="initialPoolSize" value="10"/>
        <!-- 连接的最大空闲时间，超时的连接将被丢弃，单位：秒 -->
        <property name="maxIdleTime" value="60"/>
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="10000"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>
    <!-- 从web容器中取得数据源对象 -->
    <!--  
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    	<property name="jndiName" value="java:comp/env/jdbc/jihua"></property>
    </bean>
	-->
	<!-- 配置sessionFactory对象 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"></property>
    	<property name="hibernateProperties">
    		<props>
    			<!-- hibernate方言 -->
    			<prop key="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</prop>
    			<prop key="hibernate.show_sql">true</prop>
    			<prop key="hibernate.format_sql">true</prop>
    			<prop key="hibernate.hbm2ddl.auto">update</prop>
    			<!-- 是否使用二级缓存 -->
    			<prop key="hibernate.cache.use_second_level_cache">true</prop>
    			<!-- 二级缓存实现类 -->
    			<prop key="hibernate.cache.region.factory_class">
    				org.hibernate.cache.ehcache.internal.EhcacheRegionFactory
    			</prop>
    			<!-- 是否使用查询缓存 -->
    			<prop key="hibernate.cache.user_query_cache">true</prop>
    			
    		</props>
    	</property>
    	
    	<!-- 持久化pojo类配置 -->
    	<property name="packagesToScan">
    		<list>
    			<value>priv.demo.ssh.entity</value>
    		</list>
    	</property>
    </bean>
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
    	<property name="sessionFactory" ref="sessionFactory"></property>
    </bean> 
    
    
    <!-- 基于xml配置的事务处理 -->
    <!-- 定义事务管理类 -->
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
    	<property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 配置声明式事务-->
    <tx:annotation-driven transaction-manager="txManager"/>
     
    <!-- 配置事务属性 -->
    <!-- 
    	read-only:设置该事务中是否允许修改数据，对于只查询的事务，设置为true，可以提高事务的执行速度
    	propagation:事务传播机制，一般设为required,可以保证在事务中的代码只在当前事务中运行，防止创建多个事务
    	isolation:事务隔离等级，即当前事务和其他事务的隔离程序，在并发事务处理的情况下需要考虑它的设置，如果在
    		SessionFactory中设置好了该值，使用default即可
    	timeout:允许事务运行的最长时间，以秒为单位，防止事务执行时间太长而影响系统性能
    	rollback-for:触发回滚的异常
    	no-rollback-for:不会触发回滚的异常
     -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
    	<tx:attributes>
    		<tx:method name="search*" read-only="true" propagation="REQUIRED" isolation="DEFAULT" timeout="-1"/>
    		<tx:method name="add*"/>
    		<tx:method name="remove*"/>
    		<tx:method name="modify*"/>
    	</tx:attributes>
    </tx:advice>
    
    <!-- 设置事务切入点 -->
    <aop:config>
    	<aop:pointcut expression="execution(public * priv.demo.ssh.service..*(..))" id="service"/>
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="service"/>
    </aop:config>
    <!-- 基于@AspectJ切面的驱动器 -->
    <aop:aspectj-autoproxy />
    <bean id="serviceLogging" class="priv.demo.ssh.service.ServiceLogging"></bean>
    
</beans>